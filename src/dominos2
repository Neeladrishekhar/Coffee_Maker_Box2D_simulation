/*
* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/

/* 
 * Base code for CS 251 Software Systems Lab 
 * Department of Computer Science and Engineering, IIT Bombay
 * 
 */


#include "cs251_base.hpp"
#include "render.hpp"

#ifdef __APPLE__
	#include <GLUT/glut.h>
#else
	#include "GL/freeglut.h"
#endif

#include <cstring>
using namespace std;

#include "dominos.hpp"

namespace cs251
{
  /**  The is the constructor 
   * This is the documentation block for the constructor.
   */ 
  
  dominos_t::dominos_t()
  {
    //Ground
    /*! \var b1 
     * \brief pointer to the body ground 
     */ 
    b2Body* b1;  
    {
      
      b2EdgeShape shape; 
      shape.Set(b2Vec2(-90.0f, 0.0f), b2Vec2(90.0f, 0.0f));
      b2BodyDef bd; 
      b1 = m_world->CreateBody(&bd); 
      b1->CreateFixture(&shape, 0.0f);
    }
    /*shreyansh      
    //Top horizontal shelf
    {
      b2PolygonShape shape;
      shape.SetAsBox(6.0f, 0.25f);
	
      b2BodyDef bd;
      bd.position.Set(-31.0f, 30.0f);
      b2Body* ground = m_world->CreateBody(&bd);
      ground->CreateFixture(&shape, 0.0f);
    }

    //Dominos
    {
      b2PolygonShape shape;
      shape.SetAsBox(0.1f, 1.0f);
	
      b2FixtureDef fd;
      fd.shape = &shape;
      fd.density = 20.0f;
      fd.friction = 0.1f;
		
      for (int i = 0; i < 10; ++i)
	{
	  b2BodyDef bd;
	  bd.type = b2_dynamicBody;
	  bd.position.Set(-35.5f + 1.0f * i, 31.25f);
	  b2Body* body = m_world->CreateBody(&bd);
	  body->CreateFixture(&fd);
	}
    } shreyansh*/
      
    /*shreyansh //Another horizontal shelf
    {
      b2PolygonShape shape;
      shape.SetAsBox(5.0f, 0.25f, b2Vec2(-30.f,20.f), 0.0f);
	
      b2BodyDef bd;
      bd.position.Set(1.0f, 6.0f);
      b2Body* ground = m_world->CreateBody(&bd);
      ground->CreateFixture(&shape, 0.0f);
    } shreyansh */

/*shreyansh
    //The pendulum that knocks the dominos off
    {
      b2Body* b2;
      {
	b2PolygonShape shape;
	shape.SetAsBox(0.f, 0.f);
	  
	b2BodyDef bd;
	bd.position.Set(-36.5f, 40.0f);
	b2 = m_world->CreateBody(&bd);
	b2->CreateFixture(&shape, 10.0f);
      }
	
      b2Body* b4;
      {
	b2PolygonShape shape;
	shape.SetAsBox(0.25f, 0.25f);
	  
	b2BodyDef bd;
	bd.type = b2_dynamicBody;
	bd.position.Set(-40.0f, 33.0f);
	b4 = m_world->CreateBody(&bd);
	b4->CreateFixture(&shape, 2.0f);
      }
	
      b2RevoluteJointDef jd;
      b2Vec2 anchor;
      anchor.Set(-37.0f, 40.0f);
      jd.Initialize(b2, b4, anchor);
      m_world->CreateJoint(&jd);
    }

shreyansh*/


    /*shreyansh  
    //The train of small spheres
    {
      b2Body* spherebody;
	
      b2CircleShape circle;
      circle.m_radius = 0.5;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = 1.0f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.0f;
	
      for (int i = 0; i < 10; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-22.2f + i*1.0, 26.6f);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
    }shreyansh*/
/*shreyansh
    //The pulley system
    {
      b2BodyDef *bd = new b2BodyDef;
      bd->type = b2_dynamicBody;
      bd->position.Set(-10,15);
      bd->fixedRotation = true;
      
      //The open box
      b2FixtureDef *fd1 = new b2FixtureDef;
      fd1->density = 10.0;
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(2,0.2, b2Vec2(0.f,-1.9f), 0);
      fd1->shape = &bs1;
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 10.0;
      fd2->friction = 0.5;
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,2, b2Vec2(2.0f,0.f), 0);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 10.0;
      fd3->friction = 0.5;
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,2, b2Vec2(-2.0f,0.f), 0);
      fd3->shape = &bs3;
       
      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd1);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);

      //The bar
      bd->position.Set(10,15);	
      fd1->density = 34.0;	  
      b2Body* box2 = m_world->CreateBody(bd);
      box2->CreateFixture(fd1);

      // The pulley joint
      b2PulleyJointDef* myjoint = new b2PulleyJointDef();
      b2Vec2 worldAnchorOnBody1(-10, 15); // Anchor point on body 1 in world axis
      b2Vec2 worldAnchorOnBody2(10, 15); // Anchor point on body 2 in world axis
      b2Vec2 worldAnchorGround1(-10, 20); // Anchor point for ground 1 in world axis
      b2Vec2 worldAnchorGround2(10, 20); // Anchor point for ground 2 in world axis
      float32 ratio = 1.0f; // Define ratio
      myjoint->Initialize(box1, box2, worldAnchorGround1, worldAnchorGround2, box1->GetWorldCenter(), box2->GetWorldCenter(), ratio);
      m_world->CreateJoint(myjoint);
    }
shreyansh */

/////////////////////////////////////////////////////


	//container
    { b2FixtureDef *fd1 = new b2FixtureDef;
      fd1->density = 10.0;
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(3,0.2, b2Vec2(-3.3f,-7.5f), -.5);
      fd1->shape = &bs1;
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 10.0;
      fd2->friction = 0.5;
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,10.0, b2Vec2(6.0f,4.f), 0);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 10.0;
      fd3->friction = 0.5;
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,10.0, b2Vec2(-6.0f,4.f), 0);
      fd3->shape = &bs3;


      b2BodyDef bd3;
      bd3.position.Set(-10.0f, 35.0f);
      b2Body* body3 = m_world->CreateBody(&bd3);
      body3->CreateFixture(fd1);
      body3->CreateFixture(fd2);
      body3->CreateFixture(fd3);
    }

//water molecules
    {
      b2Body* spherebody;
	
      b2CircleShape circle;
      circle.m_radius = 0.25;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = .5f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.2f;
      for (int j=0; j<30 ; ++j){
	      for (int i = 0; i < 23; ++i)
		{
		  b2BodyDef ballbd;
		  ballbd.type = b2_dynamicBody;
		  ballbd.position.Set(-15.5f + i*0.5, 31.0f + j*0.5);
		  spherebody = m_world->CreateBody(&ballbd);
		  spherebody->CreateFixture(&ballfd);
		}
      }
    } 

//coffee molecules

    {
      b2Body* spherebody;
	
      b2CircleShape circle;
      circle.m_radius = 1.5;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = .2f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.2f;
      for (int i = 0; i <6; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-18.5f + i*3.0, 16.f);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
      
    } 

//// small coffee molecules

    {
      b2Body* spherebody;
	
      b2CircleShape circle;
      circle.m_radius = 0.45;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = .25f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.2f;
      for (int i = 0; i <22; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-18.5f + i*0.9, 18.f);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
      for (int i = 0; i <21; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-18.5f + i*0.9, 18.9f);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
      for (int i = 0; i <21; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-18.5f + i*0.9, 19.8f);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}       

    }



//*******The pendulum that churns  // have to change this to a ball with high density
    {
      b2Body* b2;
      {
	b2PolygonShape shape;
	shape.SetAsBox(0.0f, 0.f);
	  
	b2BodyDef bd;
	bd.position.Set(-10.0f, 23.0f);
	b2 = m_world->CreateBody(&bd);
	b2->CreateFixture(&shape, 23.0f);
      }
	
      b2Body* b4;
      /*{
	b2PolygonShape shape;
	shape.SetAsBox(0.25f, 0.25f);

	b2BodyDef bd;
	bd.type = b2_dynamicBody;
	bd.position.Set(-20.f, 13.5f);
	b4 = m_world->CreateBody(&bd);
	b4->CreateFixture(&shape, 2.0f);

      }*/
      {
      b2PolygonShape shape;
      shape.SetAsBox(0.25f, 0.25f);
	
      b2FixtureDef ballfd;
      ballfd.shape = &shape;
      ballfd.density = 3000.0f;
      ballfd.friction = 0.5f;
      ballfd.restitution = 0.0f;
      b2BodyDef ballbd;
      ballbd.type = b2_dynamicBody;
      ballbd.position.Set(-20.f, 23.225f);
      b4 = m_world->CreateBody(&ballbd);
      b4->CreateFixture(&ballfd);

      }

      b2RopeJointDef jd;
      jd.bodyA=b2; 
      jd.bodyB=b4;
      jd.localAnchorA.Set(0.0f, 0.0f) ; 
      jd.localAnchorB.Set(0.0f, 0.0f) ; 
      jd.maxLength = 10.3f;
      m_world->CreateJoint(&jd);
    }

//initializer

//The pulley system
    {
      b2BodyDef *bd = new b2BodyDef;
      bd->type = b2_dynamicBody;
      bd->position.Set(-30,50);
      bd->fixedRotation = true;
      ///The open box
      b2FixtureDef *fd1 = new b2FixtureDef;
      fd1->density = 1.0;
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(2,0.2, b2Vec2(-10.f,-11.9f), 0);
      fd1->shape = &bs1;
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 1.0;
      fd2->friction = 0.5;
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,2, b2Vec2(-8.0f,-10.f), 0);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 1.0;
      fd3->friction = 0.5;
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,2, b2Vec2(-12.0f,-10.f), 0);
      fd3->shape = &bs3;
      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd1);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);

      b2BodyDef *bd11 = new b2BodyDef;
      bd11->type = b2_dynamicBody;
      bd11->position.Set(30,50);
      bd11->fixedRotation = true;
      b2Body* box2 = m_world->CreateBody(bd11);
      box2->CreateFixture(fd1);
      box2->CreateFixture(fd2);
      box2->CreateFixture(fd3);

      //wedge
      b2Body* sbody;
      b2PolygonShape poly;
      b2Vec2 vertices[3];
      vertices[0].Set(-1,0);
      vertices[1].Set(1,0);
      vertices[2].Set(0,1.5);
      poly.Set(vertices, 3);
      b2FixtureDef wedgefd;
      wedgefd.shape = &poly;
      wedgefd.density = 10.0f;
      wedgefd.friction = 0.0f;
      wedgefd.restitution = 0.0f;
      b2BodyDef wedgebd;
      wedgebd.position.Set(-10.0f, 29.35f);
      sbody = m_world->CreateBody(&wedgebd);
      sbody->CreateFixture(&wedgefd);


      //The plank on top of the wedge
      b2PolygonShape shape;
      shape.SetAsBox(5.6f, 0.2f);
      b2BodyDef bd2;
      bd2.position.Set(-10.0f, 30.85f);
      bd2.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd2);
      b2FixtureDef *fd4 = new b2FixtureDef;
      fd4->density = 1.f;
      fd4->shape = new b2PolygonShape;
      fd4->shape = &shape;
      body->CreateFixture(fd4);

      b2RevoluteJointDef jd;
      b2Vec2 anchor;
      anchor.Set(-10.0f,30.85f);
      jd.Initialize(sbody, body, anchor);
      m_world->CreateJoint(&jd);

      // The pulley joint
      b2PulleyJointDef* myjoint = new b2PulleyJointDef();
      b2PulleyJointDef* myjoint2 = new b2PulleyJointDef();
      
      b2Vec2 anchor1(-40, 50); 
      b2Vec2 anchor2(-15.2,50);
      b2Vec2 anchor3(20,50);
      b2Vec2 anchor4(-4.8,50);
      b2Vec2 body2anchor(-15.2,30.85) ;
      b2Vec2 body2anchor2(-4.8,30.85) ;
      float32 ratio = 1.0f; // Define ratio
      myjoint->Initialize(box1, body, anchor1, anchor2, box1->GetWorldCenter(), body2anchor, ratio);
      myjoint2->Initialize(box2, body, anchor3, anchor4, box2->GetWorldCenter(), body2anchor2, ratio);
      m_world->CreateJoint(myjoint);
      m_world->CreateJoint(myjoint2);
    }



//rotator1
    {
      b2PolygonShape shape;
      shape.SetAsBox(2.5f, 0.2f);
	
      b2BodyDef bd;
      bd.position.Set(-10.0f, 23.0f);
      bd.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd);
      b2FixtureDef *fd = new b2FixtureDef;
      fd->density = 1.f;
      fd->shape = new b2PolygonShape;
      fd->shape = &shape;
      body->CreateFixture(fd);

      //b2PolygonShape shape2;
      //shape2.SetAsBox(0.2f, 10.0f);
      b2BodyDef bd2;
      bd2.position.Set(-10.0f, 23.0f);
      b2Body* body2 = m_world->CreateBody(&bd2);

      b2RevoluteJointDef jointDef;
      jointDef.bodyA = body;
      jointDef.bodyB = body2;
      jointDef.localAnchorA.Set(0,0);
      jointDef.localAnchorB.Set(0,0);
      jointDef.collideConnected = false;
      m_world->CreateJoint(&jointDef);
    }


//rotator2
  
    {
      b2PolygonShape shape;
      shape.SetAsBox(2.8f, 0.2f);
	
      b2BodyDef bd;
      bd.position.Set(-15.0f, 23.5f);
      bd.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd);
      b2FixtureDef *fd = new b2FixtureDef;
      fd->density = 1.f;
      fd->shape = new b2PolygonShape;
      fd->shape = &shape;
      body->CreateFixture(fd);

      //b2PolygonShape shape2;
      //shape2.SetAsBox(0.2f, 10.0f);
      b2BodyDef bd2;
      bd2.position.Set(-15.0f, 23.5f);
      b2Body* body2 = m_world->CreateBody(&bd2);

      b2RevoluteJointDef jointDef;
      jointDef.bodyA = body;
      jointDef.bodyB = body2;
      jointDef.localAnchorA.Set(0,0);
      jointDef.localAnchorB.Set(0,0);
      jointDef.collideConnected = false;
      m_world->CreateJoint(&jointDef);
    }

//rotator3
    {
      b2PolygonShape shape;
      shape.SetAsBox(2.5f, 0.2f);
	
      b2BodyDef bd;
      bd.position.Set(-20.0f, 23.0f);
      bd.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd);
      b2FixtureDef *fd = new b2FixtureDef;
      fd->density = 1.f;
      fd->shape = new b2PolygonShape;
      fd->shape = &shape;
      body->CreateFixture(fd);

      b2BodyDef bd2;
      bd2.position.Set(-20.0f, 23.0f);
      b2Body* body2 = m_world->CreateBody(&bd2);

      b2RevoluteJointDef jointDef;
      jointDef.bodyA = body;
      jointDef.bodyB = body2;
      jointDef.localAnchorA.Set(0,0);
      jointDef.localAnchorB.Set(0,0);
      jointDef.collideConnected = false;
      m_world->CreateJoint(&jointDef);
      
      b2Body* b4;
      b2BodyDef bd3;
      b2PolygonShape shape1;
      shape1.SetAsBox(0.f, 0.f);
      bd3.position.Set(-21.25f, 22.75f);
      b4 = m_world->CreateBody(&bd3);
      b4->CreateFixture(&shape1, 2.0f);
    }

//checking with extra ball
    {
      b2Body* sbody;
      b2CircleShape circle;
      circle.m_radius = 0.5;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = 50.0f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 1.0f;
      b2BodyDef ballbd;
      ballbd.type = b2_dynamicBody;
      ballbd.position.Set(20.0f,69.0f);
      sbody = m_world->CreateBody(&ballbd);
      sbody->CreateFixture(&ballfd);
    } 

//checking with extra ball
    {
      b2Body* sbody;
      b2CircleShape circle;
      circle.m_radius = 0.5;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = 50.0f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 1.0f;
      b2BodyDef ballbd;
      ballbd.type = b2_dynamicBody;
      ballbd.position.Set(-40.0f, 55.0f);
      sbody = m_world->CreateBody(&ballbd);
      sbody->CreateFixture(&ballfd);
    }

   /* {
      b2Body* spherebody;
	
      b2CircleShape circle;
      circle.m_radius = 0.5;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = 50.f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.2f;
      for (int i = 0; i <6; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(20.f, 39.f + 50*i);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
      for (int i = 0; i <7; ++i)
	{
	  b2BodyDef ballbd;
	  ballbd.type = b2_dynamicBody;
	  ballbd.position.Set(-40.0f, 64.f+ 50*i);
	  spherebody = m_world->CreateBody(&ballbd);
	  spherebody->CreateFixture(&ballfd);
	}
   

    }*/

/////lower jar
     {
      b2BodyDef *bd = new b2BodyDef;
      //bd->type = b2_dynamicBody;
      bd->position.Set(0,15);
      bd->fixedRotation = true;
      
      ///The open box
      b2FixtureDef *fd1 = new b2FixtureDef;
      fd1->density = 1.0;
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(10.2,0.2, b2Vec2(-9.9f,-14.5f), 0);
      fd1->shape = &bs1;
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 1.0;
      fd2->friction = 0.5;
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,7, b2Vec2(0.5f,-8.f), 0);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 1.0;
      fd3->friction = 0.5;
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,7, b2Vec2(-20.5f,-8.f), 0);
      fd3->shape = &bs3;
       
      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd1);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);
      }

////the filter

{
      b2BodyDef *bd = new b2BodyDef;
      //bd->type = b2_dynamicBody;
      bd->position.Set(0,25);
      bd->fixedRotation = true;
      
      ///The open box

      b2FixtureDef *fd1 = new b2FixtureDef;
      fd1->density = 1.0; // center
      fd1->friction = 0.5;
      fd1->restitution = 0.f;
      fd1->shape = new b2PolygonShape;
      b2PolygonShape bs1;
      bs1.SetAsBox(1.8,0.2, b2Vec2(-9.9f,-13.f), 0);
      fd1->shape = &bs1;

      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 1.0; 
      fd2->friction = 0.5; // rightmost
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,1.8, b2Vec2(-1.f,-9.f), -0.5);
      fd2->shape = &bs2;
      b2FixtureDef *fd3 = new b2FixtureDef;
      
      fd3->density = 1.0;
      fd3->friction = 0.5; //leftmost
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,1.8, b2Vec2(-19.f,-9.f), 0.5);
      fd3->shape = &bs3;

      b2FixtureDef *fd4 = new b2FixtureDef;       
      fd4->density = 1.0;
      fd4->friction = 0.5; // second from right
      fd4->restitution = 0.f;
      fd4->shape = new b2PolygonShape;
      b2PolygonShape bs4;
      bs4.SetAsBox(0.2,1.8, b2Vec2(-4.45f,-11.75f), -1);
      fd4->shape = &bs4;

      b2FixtureDef *fd5 = new b2FixtureDef;
      fd5->density = 1.0;
      fd5->friction = 0.5; 
      fd5->restitution = 0.f; // second from left
      fd5->shape = new b2PolygonShape;
      b2PolygonShape bs5;
      bs5.SetAsBox(0.2,1.8, b2Vec2(-15.45f,-11.75f), 1);
      fd5->shape = &bs5;

      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd1);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);
      box1->CreateFixture(fd4);
      box1->CreateFixture(fd5);
}


/// the large slanted planks so that molecules dont get away
{
      b2BodyDef *bd = new b2BodyDef;
      //bd->type = b2_dynamicBody;
      bd->position.Set(0,36.1);
      bd->fixedRotation = true;

      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 1.0; 
      fd2->friction = 0.5; // right
      fd2->restitution = 0.f;
      fd2->shape = new b2PolygonShape;
      b2PolygonShape bs2;
      bs2.SetAsBox(0.2,10, b2Vec2(8.5f,-13.f), -1.0);
      fd2->shape = &bs2;

      b2FixtureDef *fd3 = new b2FixtureDef;      
      fd3->density = 1.0;
      fd3->friction = 0.5; 
      fd3->restitution = 0.f;
      fd3->shape = new b2PolygonShape;
      b2PolygonShape bs3;
      bs3.SetAsBox(0.2,10, b2Vec2(-28.5f,-13.f), 1.0);
      fd3->shape = &bs3;

      b2FixtureDef *fd4 = new b2FixtureDef;
      fd4->density = 1.0;
      fd4->friction = 0.5; 
      fd4->restitution = 0.f;
      fd4->shape = new b2PolygonShape;
      b2PolygonShape bs4;
      bs4.SetAsBox(0.2,3, b2Vec2(17.f,-4.9f), 0.0);
      fd4->shape = &bs4;

      b2FixtureDef *fd5 = new b2FixtureDef;
      fd5->density = 1.0;
      fd5->friction = 0.5; 
      fd5->restitution = 0.f;
      fd5->shape = new b2PolygonShape;
      b2PolygonShape bs5;
      bs5.SetAsBox(0.2,3, b2Vec2(-37.f,-4.9f), 0.0);
      fd5->shape = &bs5;

      b2Body* box1 = m_world->CreateBody(bd);
      box1->CreateFixture(fd2);
      box1->CreateFixture(fd3);
      box1->CreateFixture(fd4);
      box1->CreateFixture(fd5);

}





/////////////////////////////////////////////////////
   /*shreyansh //The revolving horizontal platform
    {
      b2PolygonShape shape;
      shape.SetAsBox(2.2f, 0.2f);
	
      b2BodyDef bd;
      bd.position.Set(14.0f, 14.0f);
      bd.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd);
      b2FixtureDef *fd = new b2FixtureDef;
      fd->density = 1.f;
      fd->shape = new b2PolygonShape;
      fd->shape = &shape;
      body->CreateFixture(fd);

      b2PolygonShape shape2;
      shape2.SetAsBox(0.2f, 2.0f);
      b2BodyDef bd2;
      bd2.position.Set(14.0f, 16.0f);
      b2Body* body2 = m_world->CreateBody(&bd2);

      b2RevoluteJointDef jointDef;
      jointDef.bodyA = body;
      jointDef.bodyB = body2;
      jointDef.localAnchorA.Set(0,0);
      jointDef.localAnchorB.Set(0,0);
      jointDef.collideConnected = false;
      m_world->CreateJoint(&jointDef);
    }

    //The heavy sphere on the platform
    {
      b2Body* sbody;
      b2CircleShape circle;
      circle.m_radius = 1.0;
	
      b2FixtureDef ballfd;
      ballfd.shape = &circle;
      ballfd.density = 50.0f;
      ballfd.friction = 0.0f;
      ballfd.restitution = 0.0f;
      b2BodyDef ballbd;
      ballbd.type = b2_dynamicBody;
      ballbd.position.Set(14.0f, 18.0f);
      sbody = m_world->CreateBody(&ballbd);
      sbody->CreateFixture(&ballfd);
    }
shreyansh*/


/*shreyansh
    //The see-saw system at the bottom
    {
      //The triangle wedge
      b2Body* sbody;
      b2PolygonShape poly;
      b2Vec2 vertices[3];
      vertices[0].Set(-1,0);
      vertices[1].Set(1,0);
      vertices[2].Set(0,1.5);
      poly.Set(vertices, 3);
      b2FixtureDef wedgefd;
      wedgefd.shape = &poly;
      wedgefd.density = 10.0f;
      wedgefd.friction = 0.0f;
      wedgefd.restitution = 0.0f;
      b2BodyDef wedgebd;
      wedgebd.position.Set(30.0f, 0.0f);
      sbody = m_world->CreateBody(&wedgebd);
      sbody->CreateFixture(&wedgefd);

      //The plank on top of the wedge
      b2PolygonShape shape;
      shape.SetAsBox(15.0f, 0.2f);
      b2BodyDef bd2;
      bd2.position.Set(30.0f, 1.5f);
      bd2.type = b2_dynamicBody;
      b2Body* body = m_world->CreateBody(&bd2);
      b2FixtureDef *fd2 = new b2FixtureDef;
      fd2->density = 1.f;
      fd2->shape = new b2PolygonShape;
      fd2->shape = &shape;
      body->CreateFixture(fd2);

      b2RevoluteJointDef jd;
      b2Vec2 anchor;
      anchor.Set(30.0f, 1.5f);
      jd.Initialize(sbody, body, anchor);
      m_world->CreateJoint(&jd);

      //The light box on the right side of the see-saw
      b2PolygonShape shape2;
      shape2.SetAsBox(2.0f, 2.0f);
      b2BodyDef bd3;
      bd3.position.Set(40.0f, 2.0f);
      bd3.type = b2_dynamicBody;
      b2Body* body3 = m_world->CreateBody(&bd3);
      b2FixtureDef *fd3 = new b2FixtureDef;
      fd3->density = 0.01f;
      fd3->shape = new b2PolygonShape;
      fd3->shape = &shape2;
      body3->CreateFixture(fd3);
    } */
  }

  sim_t *sim = new sim_t("Dominos", dominos_t::create);
}
